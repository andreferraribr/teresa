---
title: "api_santa_teresa"
editor: visual
---

```{r pacotes}
# Loading packages
library(httr)
library(jsonlite)
library(purrr)
library(tidyverse)
library(DT)
library(lubridate)
library(readxl)
options(encoding = "latin1")
knitr::opts_chunk$set( echo=FALSE, warning=FALSE, message=FALSE)
```

```{r}

# 
endpoint <- read_excel("endpoint.xlsx")

endpoint <- endpoint %>% mutate(csv = paste0(item,".csv"))

endpoint <- endpoint %>% mutate(salvar_csv = paste0("dados/",item,".csv"))

setwd("./dados")
file.list <-  list.files( pattern='*.csv')
df.list <- lapply(file.list, read_csv) %>% 
  setNames(str_remove( file.list,".csv")) 
setwd("~/R/teresa")

colnames (df.list[["pagamentos"]] ) <- (str_replace(colnames (df.list[["pagamentos"]]),paste0( "pagamentos","."),""))
colnames (df.list[["atas"]] ) <- (str_replace(colnames (df.list[["atas"]]),paste0( "atas","."),""))
colnames (df.list[["licitacoes"]] ) <- (str_replace(colnames (df.list[["licitacoes"]]),paste0( "licitacoes","."),""))
colnames (df.list[["documentos"]] ) <- (str_replace(colnames (df.list[["documentos"]]),paste0( "documentos","."),""))
colnames (df.list[["diarias_passagens"]] ) <- (str_replace(colnames (df.list[["diarias_passagens"]]),paste0( "diarias_passagens","."),""))
colnames (df.list[["contratos"]] ) <- (str_replace(colnames (df.list[["contratos"]]),paste0( "contratos","."),""))
colnames (df.list[["servidores"]] ) <- (str_replace(colnames (df.list[["servidores"]]),paste0( "servidores","."),""))


# teste último dia
endpoint <- endpoint %>% mutate(data_para_url = case_when(
  obrigatorio == "ano" ~ "?2022&page_size=1",
  item == "pagamentos"~ paste0("?data_inicio=",strftime( max(as.Date(df.list$pagamentos$data)+days(1)),"%d/%m/%Y"),"&data_fim=",strftime( today(),"%d/%m/%Y"),"&page_size=1"),
  item == "diarias_passagens"~ paste0("?data_inicio=",strftime( max(as.Date(df.list$diarias_passagens$data)+days(1)),"%d/%m/%Y"),"&data_fim=",strftime( today(),"%d/%m/%Y"),"&page_size=1"),
    obrigatorio == "data_inicial e data_final" & item != "pagamentos"& item != "diarias_passagens"~"?data_inicio=01/01/2022&data_fim=31/12/2022&page_size=1",
  obrigatorio == "mês e ano competência"~ "?competencia_ano=2022&competencia_mes=11&page_size=1"
  ))




endpoint <- endpoint %>% mutate(url_api_dados = paste0( endpoint,data_para_url))



## as 3 funcoes abaixo são utilizadas para criar a df_dados

# funcao para obter numero de paginas da API
api_linhas <- function(x){
api_linhas <- fromJSON(content(GET(url = x),
                          "text", encoding = "UTF-8"),
                           flatten = TRUE)
# rodar só um registro por página para ficar mais rápido
# depois multiplicar por 100 para rodar a funcao relatorio para rapido
api_linhas<- as.integer( api_linhas$pagina_total)
return(api_linhas)
}



# funcao para obter a data do request
api_atualizacao <- function(x){
api_date <- GET(url = x)
api_atualizacao <-  as.Date(api_date$date)
return(api_atualizacao)
}



# funcao para obter a url do request e fazer o left_join com a DF endpoint
api_url <- function(x){
api_url <- GET(url = x)
api_url <-  (api_url$url)
return(api_url)

}


# criar df com data do request (atualizacao), numero de paginas e endpoint
df_dados <- map_df(endpoint$url_api_dados, function(.x) {
  return(data.frame(data = api_atualizacao(.x), 
                    linhas = api_linhas(.x),
                    url_api_dados = api_url(.x)))
})



endpoint <- left_join(endpoint,df_dados)

endpoint <- endpoint %>% arrange(item)

endpoint <- endpoint %>% mutate(paginas = if_else(linhas>0 ,as.integer(linhas/100)+1,0))
# filtrar apenas as APIs de interesse
endpoint_relatorio <- endpoint %>% filter(item %in% c( names(df.list)), paginas>0)



call_urls <- c()

# criar todas as urls da API

for(i in  1:NROW(endpoint_relatorio) ) {                                             
   for(j in 1:endpoint_relatorio$paginas[i]) {                                           
   url_loop <-(paste0(endpoint_relatorio$url_api_dados[i], "00&page=", j))  
   call_urls <- c(call_urls,url_loop)
  }
}




# endpoint_relatorio <- endpoint 

# funcao para gerar as DFs a partir das URLs
df_call <- function(x){relatorios(str_subset(call_urls,x))} 

json2df = function(a){ 
  # "a" é a URL
  f_api <-   GET(a)
  f_txt <- content(f_api, as="text", encoding="UFT-8")
  f_json <- fromJSON(f_txt, flatten = TRUE)
 
  f_df <-as.data.frame(f_json$registros) 
}

bind_json2df = function(a){ map(a,json2df)}

relatorios = function(a){map_dfr(bind_json2df(a), bind_rows)}



all <- map(endpoint_relatorio$item,df_call) %>% 
                                setNames(endpoint_relatorio$item)




df_bind <- function(x){
  rbind((df.list[[str_subset(names(df.list),paste0(x))]]),(all[[str_subset(names(all),x)]])) %>% unique()
}


for (i in names(all)){
  names(df.list[[i]]) <- names(all[[i]])
}

all_bind <- map(endpoint_relatorio$item,df_bind)

names(all_bind) <- endpoint_relatorio$item

# colnames (all_bind[["pagamentos"]] ) <- (str_replace(colnames (all_bind[["pagamentos"]]),paste0( "pagamentos","."),""))
colnames (all_bind[["atas"]] ) <- (str_replace(colnames (all_bind[["atas"]]),paste0( "atas","."),""))
colnames (all_bind[["licitacoes"]] ) <- (str_replace(colnames (all_bind[["licitacoes"]]),paste0( "licitacoes","."),""))
colnames (all_bind[["documentos"]] ) <- (str_replace(colnames (all_bind[["documentos"]]),paste0( "documentos","."),""))
# colnames (all_bind[["diarias_passagens"]] ) <- (str_replace(colnames (all_bind[["diarias_passagens"]]),paste0( "diarias_passagens","."),""))
colnames (all_bind[["contratos"]] ) <- (str_replace(colnames (all_bind[["contratos"]]),paste0( "contratos","."),""))
colnames (all_bind[["servidores"]] ) <- (str_replace(colnames (all_bind[["servidores"]]),paste0( "servidores","."),""))
colnames (all_bind[["receitas"]] ) <- (str_replace(colnames (all_bind[["receitas"]]),paste0( "receitas","."),""))

gravar_csv <- function(x,y){write_csv(x,y)}

# for (i in all_bind){( gravar_csv(as.data.frame( all_bind [i])                 ,endpoint_relatorio$csv[i]))} 

for (i in (1: NROW(endpoint_relatorio))) {gravar_csv(as.data.frame( all_bind[i]), endpoint_relatorio$salvar_csv[i])}

# gravar_csv(all_bind$atas,"dados/atas.csv")
# gravar_csv(all_bind$pagamentos,"dados/pagamentos.csv")
# gravar_csv(all_bind$contratos,"dados/contratos.csv")
# gravar_csv(all_bind$licitacoes,"dados/licitacoes.csv")
# gravar_csv(all_bind$servidores,"dados/servidores.csv")
# gravar_csv()
# gravar_csv()

```
