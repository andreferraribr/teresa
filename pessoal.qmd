---
title: "Pessoal"
editor: visual
format:
  html:
    code-fold: true
---

```{r}
knitr::opts_chunk$set(  warning=FALSE, message=FALSE)
options(encoding = "latin1")
```

```{r}
# Loading packages
#| warning: false
#| echo: false
library(purrr)
library(flexdashboard)
library(shiny)
library(tidyverse)
library(readxl)
library(DT)
library(plotly)
library(lubridate)
library(RcppRoll)
library(scales)
library(ggrepel)
library(forcats)
library(readr)
library(janitor)
library(crosstalk)
library(highcharter)
library(htmlwidgets)


```

```{r}
#| warning: false
#| echo: false
dados_servidores <- read_csv("dados_servidores.csv", 
    col_types = cols(admissao_data = col_date(format = "%d/%m/%Y"))) %>%
  mutate(mes_ano = fct_reorder(mes_ano, data))
# servidores <- servidores %>% select(!...1)


mes_vigente <- paste0(max(dados_servidores$competencia_mes),"-", max(dados_servidores$competencia_ano))


```

```{r}
p <- ggplot(dados_servidores %>%  group_by( mes_ano) %>% summarise(quantidade = n()) , aes(x = mes_ano,y = quantidade )) + 
  geom_col(color = "blue") + geom_text(aes(label = quantidade , y = quantidade + 25))

ggplotly(p)
```

```{r}
f_trabalho <- nrow(dados_servidores %>% filter(data == max(data)))

teste <- dados_servidores %>% filter(data == max(data))


setores <- teste %>% group_by(setor_clean) %>% summarise(quantidade = n(), valor = sum(total_rendimentos))

regimes <- teste %>% group_by(regime) %>% summarise(quantidade = n(), valor = sum(total_rendimentos))

setores <- setores %>% mutate(setor_clean = if_else(quantidade>0.04*sum(quantidade), setor_clean,"demais"))%>% arrange(desc(quantidade))%>%mutate(top_4 = if_else(setor_clean %in% c(head(setores$setor_clean,4)), setor_clean, "demais"))


regimes <- regimes%>% arrange(desc(quantidade)) %>%mutate(top_4 = if_else(regime %in% c(head(regimes$regime,4)), regime, "demais"))


cargos <- teste %>% group_by(cargo_clean) %>% summarise(quantidade = n(), valor = sum(total_rendimentos))

cargos <- cargos %>% mutate(cargo_clean = if_else(quantidade>0.01*sum(quantidade), cargo_clean,"demais")) %>% arrange(desc(quantidade))%>%mutate(top_4 = if_else(cargo_clean %in% c(head(cargos$cargo_clean,4)), cargo_clean, "demais"))
```

```{r}

p <- dados_servidores %>% filter(data == max(data)) %>% group_by(setor_clean)%>% mutate(setor_clean = case_when(
  setor_clean == "Agricultura e Desenvolvimento Econômico" ~ "Agricultura e Desenv. Eco.",
  setor_clean == "Planejamento e Assuntos Estratégicos" ~ "Planejamento e Ass. Estrat.",
  
  setor_clean  == "Administração e Recursos Humanos" ~ "Administração e RH",
  TRUE ~ as.character(setor_clean)
)) %>% summarise(quantidade= n()) %>% mutate(setor_clean = fct_reorder(setor_clean, quantidade))  %>%
  ggplot(aes(x = setor_clean, y = quantidade, fill = quantidade)) +
  geom_col() + 
  coord_flip()+
  scale_fill_steps(low = "gray", high = "darkblue")+
  theme(legend.position = "none")  
ggplotly(p)
```

```{r}
# p <- dados_servidores %>% filter(data == max(data)) %>% group_by(cargo_clean) %>% summarise(valor = sum(total_rendimentos)) %>% mutate(cargo_clean = fct_reorder(cargo_clean, valor)) %>% arrange(cargo_clean)%>%  tail(n=10) %>%
#   ggplot(aes(x = cargo_clean, y = valor, fill = valor)) +
#   geom_col() + 
#   labs(x = "Cargo")+ coord_flip()+
#   scale_fill_steps(low = "gray", high = "darkblue")+
#   theme(legend.position = "none")  
# ggplotly(p)


```

```{r}
# p <- cargos%>% mutate(cargo_clean = fct_reorder(cargo_clean, valor)) %>% arrange(cargo_clean) %>%
#   ggplot(aes(x = cargo_clean, y = valor, fill = valor)) +
#   geom_col() + 
#   labs(x = "Cargo")+ coord_flip()+
#   scale_fill_steps(low = "gray", high = "darkblue")+
#   theme(legend.position = "none")  
# ggplotly(p)

p <- cargos%>% mutate(cargo_clean = fct_reorder(cargo_clean, quantidade)) %>% arrange(cargo_clean) %>%
  ggplot(aes(x = cargo_clean, y = quantidade, fill = quantidade)) +
  geom_col() + 
  coord_flip()+
  scale_fill_steps(low = "gray", high = "darkblue")+
  theme(legend.position = "none")  
ggplotly(p)
```

```{r}
# p <- setores%>% mutate(setor_clean = fct_reorder(setor_clean, valor)) %>% arrange(setor_clean) %>%
#   ggplot(aes(x = setor_clean, y = valor, fill = valor)) +
#   geom_col() + 
#   labs(x = "Setor")+ coord_flip()+
#   scale_fill_steps(low = "gray", high = "darkblue")+
#   theme(legend.position = "none")  
# ggplotly(p)
```

```{r}
# p <- dados_servidores %>% filter(data == max(data)) %>% group_by(regime) %>% summarise(valor = sum(total_rendimentos)) %>% mutate(regime = fct_reorder(regime, valor))  %>%
#   ggplot(aes(x = regime, y = valor, fill = valor)) +
#   geom_col() + 
#   labs(x = "Cargo")+ coord_flip()+
#   scale_fill_steps(low = "gray", high = "darkblue")+
#   theme(legend.position = "none")  
# ggplotly(p)
```

```{r}
p <- dados_servidores %>% filter(data == max(data)) %>% group_by(regime) %>% summarise(quantidade = n()) %>% mutate(regime = fct_reorder(regime, quantidade))  %>%
  ggplot(aes(x = regime, y = quantidade, fill = quantidade)) +
  geom_col() + 
  coord_flip()+
  scale_fill_steps(low = "gray", high = "darkblue")+
  theme(legend.position = "none")  
ggplotly(p)
```

```{r}
# p <- dados_servidores %>% filter(data == max(data)) %>% group_by(cargo_clean) %>% summarise(quantidade = n()) %>% mutate(cargo_clean = fct_reorder(cargo_clean, quantidade))  %>% arrange(cargo_clean)%>%  tail(n=10)  %>%
#   ggplot(aes(x = cargo_clean, y = quantidade, fill = quantidade)) +
#   geom_col() + 
#   labs(x = "Cargo")+ coord_flip()+
#   scale_fill_steps(low = "gray", high = "darkblue")+
#   theme(legend.position = "none")  
# ggplotly(p)

```

```{r}
# 
# dados_servidores %>%  group_by(cargo_clean , mes_ano) %>% count(cargo_clean) %>% pivot_wider(names_from = mes_ano, values_from = n)
```

```{r}
#| column: page

#  datatable( dados_servidores %>%  group_by(cargo_clean , mes_ano) %>% count(cargo_clean) %>% pivot_wider(names_from = mes_ano, values_from = n))
#  
#  
# datatable( dados_servidores %>%  group_by(regime, mes_ano) %>% count(regime) %>% pivot_wider(names_from = mes_ano, values_from = n)%>%
#   adorn_totals(where = c("row"))  )%>% 
#      formatStyle(columns = colnames(.$x$data), fontSize = "10pt")


datatable( dados_servidores %>%  group_by(setor_clean,regime,  cargo_clean, mes_ano) %>% summarise(quantidade = n()) %>% arrange(mes_ano) %>% pivot_wider(names_from = mes_ano, values_from = quantidade)%>%
  adorn_totals(where = c("row")), options = list(autoWidth = TRUE), filter = list(
  position = 'top', clear = FALSE
)  )%>% 
     formatStyle(columns = colnames(.$x$data), fontSize = "10pt")
```

```{r}
#| column: page
reais = function(x){prettyNum(round(x,0), big.mark = ".", decimal.mark = ",")}

# servidores <- rbind(servidores,servidores_2022_09) 

# servidores <- servidores %>% mutate(competencia_mes =
#       case_when(competencia_mes %in% c("10","11","12")~ competencia_mes,
#       TRUE ~ paste0("0",competencia_mes)))



# 
# datatable( dados_servidores %>%  group_by(regime, mes_ano) %>% count(regime) %>% pivot_wider(names_from = mes_ano, values_from = n)%>%
#   adorn_totals(where = c("row"))  )%>% 
#      formatStyle(columns = colnames(.$x$data), fontSize = "10pt")
# 
# p <- dados_servidores %>%  group_by(regime, mes_ano) %>% count(regime) %>% pivot_wider(names_from = mes_ano, values_from = n) %>%
#   adorn_totals(where = c("col")) %>% arrange(desc(Total)) %>%mutate(top_4 = if_else(regime %in% c(head(regimes$regime,4)), regime, "demais"))  



```

```{r}

tabela_reais = function (df,coluna = NULL) {
      datatable((df)%>%
  # "row" para o total aparecer na linha, ou seja, totalizar os valores de uma coluna
  adorn_totals("row","col") ,
      filter = 'top', 
      rownames = FALSE,
      extensions = 'Buttons',
      options = list( 
                  # order = list (df[(length(df))], 'desc'),
                  dom = "Blfrtip",
                  buttons = 
                    list("copy", list(
                      extend = "collection",
                      buttons = c("csv", "excel", "pdf"),
                      text = "Download" ) ),
                  lengthMenu = list( c(-1, 5, 10,20),
                                     c( "tudo",5, 10, 20)),
                  pageLength = -1 )
      )%>%
  formatRound(
  # formatar apenas as colunas numericas.
  # sapply para identificar as colunas numericas e combinar com o parametro COLUNA
    # ((ncol(df %>% select_if(is.character))+1):(ncol(df )+1)),
    # http://datamining.togaware.com/survivor/Remove_Non_Numeric.html
    (c(colnames(df[,sapply(df, is.numeric)]), coluna)),
  digits = 2,
  interval = 3,
  mark = ".",
  dec.mark = ","
) 
}


```

```{r}
#| column: page
# hc <- dados_servidores %>% filter(competencia_mes == max(competencia_mes)) %>% group_by(setor_clean) %>% summarise(custo = sum (total_rendimentos), quantidade = n()) %>% 
#   hchart(
#     'scatter', hcaes(x = custo, y = quantidade, size = custo, group = setor_clean),
#     maxSize = "10%"
#     )
# hc
```
